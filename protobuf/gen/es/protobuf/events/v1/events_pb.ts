// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=.ts"
// @generated from file protobuf/events/v1/events.proto (package protobuf.events.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message protobuf.events.v1.EventStreamRequest
 */
export class EventStreamRequest extends Message<EventStreamRequest> {
  constructor(data?: PartialMessage<EventStreamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protobuf.events.v1.EventStreamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventStreamRequest {
    return new EventStreamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventStreamRequest {
    return new EventStreamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventStreamRequest {
    return new EventStreamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EventStreamRequest | PlainMessage<EventStreamRequest> | undefined, b: EventStreamRequest | PlainMessage<EventStreamRequest> | undefined): boolean {
    return proto3.util.equals(EventStreamRequest, a, b);
  }
}

/**
 * @generated from message protobuf.events.v1.EventStreamResponse
 */
export class EventStreamResponse extends Message<EventStreamResponse> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string raw_json = 2;
   */
  rawJson = "";

  constructor(data?: PartialMessage<EventStreamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protobuf.events.v1.EventStreamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "raw_json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventStreamResponse {
    return new EventStreamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventStreamResponse {
    return new EventStreamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventStreamResponse {
    return new EventStreamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EventStreamResponse | PlainMessage<EventStreamResponse> | undefined, b: EventStreamResponse | PlainMessage<EventStreamResponse> | undefined): boolean {
    return proto3.util.equals(EventStreamResponse, a, b);
  }
}

